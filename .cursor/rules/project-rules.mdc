---
description: 
globs: 
alwaysApply: false
---
# 🧭 Coding Rules – Showmate (Cursor Project)

## 🔤 Langage
- Utiliser **TypeScript** pour tout le projet.
- Ne jamais utiliser `any` sauf cas exceptionnel commenté.
- Typage strict des props, fonctions, Firestore data.


## 📁 Structure de Dossier (Next.js App Router)
```bash
  /app # Pages (App Router)
  /components # Composants réutilisables
  /lib # Utilitaires (ex: Firebase, helpers)
  /hooks # Hooks personnalisés
  /styles # Fichiers CSS globaux ou thèmes
  /types # Types globaux TS (ex: User, Project)
```

## 🎨 Styling
- Utiliser **Tailwind CSS** exclusivement.
- Pas de classes inline complexes dans le JSX : créer des composants stylisés si besoin.
- Utiliser `lucide-react` pour intégrer des icon / icons
- Utiliser `clsx` ou `tailwind-merge` pour combiner les classes dynamiquement.
- Utiliser des **classes Tailwind nommées en ordre logique** :
  `px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded hover:bg-blue-700`

---

## 🧠 Logique & Bonnes pratiques React
- Utiliser les **Functional Components** uniquement.
- Toutes les pages privées doivent être wrappées dans <ProtectedRoute>...</ProtectedRoute>
- Les loading doivent être utilisé depuis [Loading.tsx](mdc:showmate/src/components/ui/Loading.tsx)
- Les données doivent être stockées en local en respectant [local-storage.mdc](mdc:showmate/.cursor/rules/local-storage.mdc)
- Ne jamais mettre de logique dans les composants si elle peut être extraite (hooks).
- Préférer les `server components` dans `/app`, sauf s’il y a besoin de `useState`, `useEffect`, etc.
- Les hooks personnalisés vont dans `/hooks`.
- Utiliser [notify.ts](mdc:showmate/src/lib/notify.ts) lors de validation de form.

---

## 🔐 Firebase & Auth
- la configuration de [firebase.ts](mdc:showmate/src/lib/firebase.ts) se situe `src/lib/firebase.ts`
- Les accès utilisateurs sont gérés via **Firebase Auth**.
- Créer un hook `useAuth` avec `onAuthStateChanged` ou `useAuthState` de `react-firebase-hooks`.
- Utiliser `Firebase Rules` pour sécuriser Firestore (lecture/écriture par rôles).

---

## 🧾 Firestore
- Les accès Firestore se font via des fonctions dans `/lib/firebase.ts`.
- Organiser les données en collections clairement définies :
  - `/users/{uid}`
  - `/projects/{projectId}`
  - `/projects/{projectId}/plannings/{day}`
- Toujours valider les données avec **Zod** avant envoi ou traitement.

---

## 📄 Composants
- Chaque composant dans son propre fichier.
- Props typées avec `interface` ou `type`.
- Exporter les composants par défaut (`export default`).
- Documenter si nécessaire via commentaires `//`.

---

## 🧪 Tests
- Pas requis au départ, mais prévoir des composants testables.
- Composants purs sans side-effects sont prioritaires pour les tests.

---

## 🧼 Formatage & Lint
- Utiliser **Prettier** pour formatage auto.
- Utiliser **ESLint** avec règles React, TypeScript, Next.js et Tailwind.


---

## 🆘 Comment nommer un composant ou un hook ?
- Composants : `ProjectCard`, `ServiceSheet`, `TechList`
- Hooks : `useAuth`, `useProjectData`, `useFirestoreQuery`

---
